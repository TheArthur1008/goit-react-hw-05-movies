{"version":3,"file":"static/js/134.94f01c9e.chunk.js","mappings":"6SAKMA,EAAWC,EAAAA,GAAAA,OAAa,CAAEC,QAAS,kCAC5BC,EAAW,mCAAG,oGACFH,EAASI,IALZ,qBAK+B,CACjDC,OAAQ,CAAEC,QAAS,sCAFI,cACnBC,EADmB,yBAIlBA,EAASC,KAAKC,SAJI,2CAAH,qDAOXC,EAAkB,mCAAG,WAAMC,GAAN,uFACTX,EAASI,IAAT,WAXP,gBAWqC,CACnDC,OAAQ,CACNC,QAAS,mCACTM,MAAOD,KAJqB,cAC1BJ,EAD0B,yBAOzBA,EAASC,KAAKC,SAPW,2CAAH,sDAUlBI,EAAe,mCAAG,WAAMC,GAAN,uFACNd,EAASI,IAAT,iBAAuBU,GAAM,CAClDT,OAAQ,CACNC,QAAS,sCAHgB,cACvBC,EADuB,yBAMtBA,EAASC,MANa,2CAAH,sDASfO,EAAiB,mCAAG,WAAMD,GAAN,uFACRd,EAASI,IAAT,iBAAuBU,EAAvB,YAAqC,CAC1DT,OAAQ,CACNC,QAAS,sCAHkB,cACzBC,EADyB,yBAMxBA,EAASC,MANe,2CAAH,sDASjBQ,EAAoB,mCAAG,WAAMF,GAAN,uFACXd,EAASI,IAAT,iBAAuBU,EAAvB,YAAqC,CAC1DT,OAAQ,CACNC,QAAS,sCAHqB,cAC5BC,EAD4B,yBAM3BA,EAASC,MANkB,2CAAH,qD,4ECxCpBS,EAAa,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KACnC,OACE,wBACGD,GACCA,EAAOE,KAAI,gBAAGN,EAAH,EAAGA,GAAIO,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OACT,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaT,GAAMU,MAAO,CAAEL,KAAMA,GAA1C,SACGE,GAAQC,KAFJR,EADA,KASlB,C,iHC2BD,UApCe,WACb,OAAsCW,EAAAA,EAAAA,UAAS,IAA/C,eAAOd,EAAP,KAAoBe,EAApB,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOP,EAAP,KAAeS,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMlB,EAAQiB,EAAazB,IAAI,SAEzB2B,GAAaC,EAAAA,EAAAA,cAAW,iBAAC,uFACxBpB,EADwB,kEAINF,EAAAA,EAAAA,IAAmBE,GAJb,OAIvBL,EAJuB,OAK7BoB,EAAUpB,GALmB,2CAM5B,CAACK,IAUJ,OAJAqB,EAAAA,EAAAA,YAAU,WACRF,GACD,GAAE,CAACA,EAAYnB,KAGd,4BACE,kBAAMsB,SAVW,SAAAC,GACnBA,EAAQC,iBACRN,EAAgB,CAAElB,MAAOD,GAC1B,EAOG,WACE,kBACE0B,KAAK,OACLC,SAAU,SAAAH,GAAO,OAAIT,EAAeS,EAAQI,OAAOC,MAAlC,KAEnB,mBAAQH,KAAK,SAAb,wBAEF,SAAC,IAAD,CAAYnB,OAAQA,MAGzB,C","sources":["Api/Api.js","components/Movies/MoviesList.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst trandingMovie = 'trending/movie/day';\nconst nameMovie = 'search/movie';\n\nconst movieApi = axios.create({ baseURL: 'https://api.themoviedb.org/3/' });\nexport const moviesFetch = async () => {\n  const response = await movieApi.get(trandingMovie, {\n    params: { api_key: 'f9515d5c748130764d8b19c2d2137bc3' },\n  });\n  return response.data.results;\n};\n\nexport const searchMoviesByName = async searchQuery => {\n  const response = await movieApi.get(`/${nameMovie}`, {\n    params: {\n      api_key: 'f9515d5c748130764d8b19c2d2137bc3',\n      query: searchQuery,\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchMovieById = async id => {\n  const response = await movieApi.get(`/movie/${id}`, {\n    params: {\n      api_key: 'f9515d5c748130764d8b19c2d2137bc3',\n    },\n  });\n  return response.data;\n};\n\nexport const searchMovieByCast = async id => {\n  const response = await movieApi.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: 'f9515d5c748130764d8b19c2d2137bc3',\n    },\n  });\n  return response.data;\n};\n\nexport const searchMovieByReviews = async id => {\n  const response = await movieApi.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: 'f9515d5c748130764d8b19c2d2137bc3',\n    },\n  });\n  return response.data;\n};\n","import { Link } from 'react-router-dom';\nexport const MoviesList = ({ movies, from }) => {\n  return (\n    <ul>\n      {movies &&\n        movies.map(({ id, name, title }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: from }}>\n              {name || title}\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n};\n","import { MoviesList } from 'components/Movies/MoviesList';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMoviesByName } from 'Api/Api';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  const fetchMovie = useCallback(async () => {\n    if (!query) {\n      return;\n    }\n    const response = await searchMoviesByName(query);\n    setMovies(response);\n  }, [query]);\n\n  const handleSubmit = element => {\n    element.preventDefault();\n    setSearchParams({ query: searchQuery });\n  };\n  useEffect(() => {\n    fetchMovie();\n  }, [fetchMovie, query]);\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange={element => setSearchQuery(element.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      <MoviesList movies={movies} />\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["movieApi","axios","baseURL","moviesFetch","get","params","api_key","response","data","results","searchMoviesByName","searchQuery","query","searchMovieById","id","searchMovieByCast","searchMovieByReviews","MoviesList","movies","from","map","name","title","to","state","useState","setSearchQuery","setMovies","useSearchParams","searchParams","setSearchParams","fetchMovie","useCallback","useEffect","onSubmit","element","preventDefault","type","onChange","target","value"],"sourceRoot":""}